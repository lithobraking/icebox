{"ast":null,"code":"import { createContext, useMemo, createElement, useContext, useRef } from 'react';\nimport { func, oneOfType, object, string, element, arrayOf } from 'prop-types';\nvar MuiPickersAdapterContext = createContext(null);\n\nvar LocalizationProvider = function LocalizationProvider(_ref) {\n  var Utils = _ref.dateAdapter,\n      children = _ref.children,\n      locale = _ref.locale,\n      libFormats = _ref.dateFormats,\n      libInstance = _ref.dateLibInstance;\n  var utils = useMemo(function () {\n    return new Utils({\n      locale: locale,\n      formats: libFormats,\n      instance: libInstance\n    });\n  }, [Utils, locale, libFormats, libInstance]);\n  return createElement(MuiPickersAdapterContext.Provider, {\n    value: utils,\n    children: children\n  });\n};\n\nprocess.env.NODE_ENV !== \"production\" ? LocalizationProvider.propTypes = {\n  dateAdapter: func.isRequired,\n  locale: oneOfType([object, string]),\n  children: oneOfType([element.isRequired, arrayOf(element.isRequired)]).isRequired\n} : void 0; // TODO uncomment when syntax will be allowed by next babel\n\nfunction checkUtils(utils)\n/* : asserts utils is MuiPickersUtils */\n{\n  if (!utils) {\n    throw new Error('Can not find utils in context. It looks like you forgot to wrap your component in LocalizationProvider, or pass dateAdapter prop directly.');\n  }\n}\n\nfunction useUtils() {\n  var utils = useContext(MuiPickersAdapterContext);\n  checkUtils(utils);\n  return utils;\n}\n\nfunction useNow() {\n  var utils = useUtils();\n  var now = useRef(utils.date());\n  return now.current;\n}\n\nexport { LocalizationProvider as L, MuiPickersAdapterContext as M, useNow as a, useUtils as u };","map":{"version":3,"sources":["../src/LocalizationProvider.tsx","../src/_shared/hooks/useUtils.ts"],"names":["MuiPickersAdapterContext","React","LocalizationProvider","dateAdapter","Utils","children","locale","dateFormats","libFormats","dateLibInstance","libInstance","utils","formats","instance","React.createElement","PropTypes","isRequired","useContext","checkUtils","useUtils","now","useRef"],"mappings":";;IAKaA,wBAAwB,GAAGC,aAAAA,CAAjC,IAAiCA,C;;AAUxC,IAAaC,oBAAyD,GAAG,SAA5DA,oBAA4D,CAAA,IAAA,EAMnE;MALSE,KAKT,GAAA,IAAA,CALJD,W;MACAE,QAII,GAAA,IAAA,CAJJA,Q;MACAC,MAGI,GAAA,IAAA,CAHJA,M;MACaE,UAET,GAAA,IAAA,CAFJD,W;MACiBG,WACb,GAAA,IAAA,CADJD,e;MAEME,KAAK,GAAG,OAAA,CACZ,YAAA;WAAM,IAAA,KAAA,CAAU;AAAEL,MAAAA,MAAM,EAAR,MAAA;AAAUM,MAAAA,OAAO,EAAjB,UAAA;AAA+BC,MAAAA,QAAQ,EAAEH;AAAzC,KAAV,C;AADM,GAAA,EAEZ,CAAA,KAAA,EAAA,MAAA,EAAA,UAAA,EAFF,WAEE,CAFY,C;SAKPI,aAAAA,CAAC,wBAADA,CAAAA,QAAAA,EAAAA;AAAmC,IAAA,KAAK,EAAxCA,KAAAA;AAAiD,IAAA,QAAQ,EAAET;AAA3DS,GAAAA,C;AAZF,CAAP;;AAeA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,oBAAoB,CAApB,SAAA,GAAiC;AAC/BX,EAAAA,WAAW,EAAEY,IAAAA,CADkB,UAAA;AAE/BT,EAAAA,MAAM,EAAES,SAAAA,CAAoB,CAAA,MAAA,EAFG,MAEH,CAApBA,CAFuB;AAG/BV,EAAAA,QAAQ,EAAEU,SAAAA,CAAoB,CAC5BA,OAAAA,CAD4B,UAAA,EAE5BA,OAAAA,CAAkBA,OAAAA,CAFVA,UAERA,CAF4B,CAApBA,CAAAA,CAGPC;AAN4B,CAAjC,GAAA,KAAA,CAAA,C,CCvBA;;AACA,SAAA,UAAA,CAAA,KAAA;;AAA8F;MACxF,CAAJ,K,EAAY;UACJ,IAAA,KAAA,CAAN,4IAAM,C;;;;AAMH,SAAA,QAAA,GAAoB;MACnBL,KAAK,GAAGM,UAAU,CAAxB,wBAAwB,C;AACxBC,EAAAA,UAAU,CAAVA,KAAU,CAAVA;SAEA,K;;;AAGK,SAAA,MAAA,GAAkB;MACjBP,KAAK,GAAGQ,QAAd,E;MACMC,GAAG,GAAGC,MAAM,CAACV,KAAK,CAAxB,IAAmBA,EAAD,C;SAEXS,GAAG,CAAV,O","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { DateIOFormats } from '@date-io/core/IUtils';\nimport { MuiPickersAdapter } from './_shared/hooks/useUtils';\n\nexport const MuiPickersAdapterContext = React.createContext<MuiPickersAdapter | null>(null);\n\nexport interface LocalizationProviderProps {\n  dateAdapter: new (...args: any) => MuiPickersAdapter;\n  children: React.ReactNode;\n  locale?: any;\n  dateLibInstance?: any;\n  dateFormats?: Partial<DateIOFormats>;\n}\n\nexport const LocalizationProvider: React.FC<LocalizationProviderProps> = ({\n  dateAdapter: Utils,\n  children,\n  locale,\n  dateFormats: libFormats,\n  dateLibInstance: libInstance,\n}) => {\n  const utils = React.useMemo(\n    () => new Utils({ locale, formats: libFormats, instance: libInstance }),\n    [Utils, locale, libFormats, libInstance]\n  );\n\n  return <MuiPickersAdapterContext.Provider value={utils} children={children} />;\n};\n\nLocalizationProvider.propTypes = {\n  dateAdapter: PropTypes.func.isRequired,\n  locale: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  children: PropTypes.oneOfType([\n    PropTypes.element.isRequired,\n    PropTypes.arrayOf(PropTypes.element.isRequired),\n  ]).isRequired,\n} as any;\n\nexport default LocalizationProvider;\n","import { useContext, useRef } from 'react';\nimport { IUtils } from '@date-io/core/IUtils';\nimport { MaterialUiPickersDate } from '../../typings/date';\nimport { MuiPickersAdapterContext } from '../../LocalizationProvider';\n\nexport type MuiPickersAdapter = IUtils<MaterialUiPickersDate>;\n\n// TODO uncomment when syntax will be allowed by next babel\nfunction checkUtils(utils: MuiPickersAdapter | null) /* : asserts utils is MuiPickersUtils */ {\n  if (!utils) {\n    throw new Error(\n      'Can not find utils in context. It looks like you forgot to wrap your component in LocalizationProvider, or pass dateAdapter prop directly.'\n    );\n  }\n}\n\nexport function useUtils() {\n  const utils = useContext(MuiPickersAdapterContext);\n  checkUtils(utils);\n\n  return utils!;\n}\n\nexport function useNow() {\n  const utils = useUtils();\n  const now = useRef(utils.date());\n\n  return now.current;\n}\n"]},"metadata":{},"sourceType":"module"}