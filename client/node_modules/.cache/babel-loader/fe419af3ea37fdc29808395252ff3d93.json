{"ast":null,"code":"var _jsxFileName = \"/Users/parkernoble/Documents/coding/icebox/client/src/components/DisplayPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Post from './Post';\nimport axios from 'axios';\nimport { post } from '../../../backend/routes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayPosts = () => {\n  _s();\n\n  const mockPosts = {\n    posts: [{\n      title: \"One\",\n      date: \"31 June 2021\",\n      body: \"Lorem ipsum blah blah blah something something\"\n    }, {\n      title: \"Two\",\n      date: \"31 June 2021\",\n      body: \"Lorem ipsum blah blah blah something something\"\n    }, {\n      title: \"Three\",\n      date: \"31 June 2021\",\n      body: \"Lorem ipsum blah blah blah something something\"\n    }, {\n      title: \"Four\",\n      date: \"31 June 2021\",\n      body: \"Lorem ipsum blah blah blah something something\"\n    }],\n    irrelevant: {\n      body: \"haha! I wasted your time!\"\n    }\n  };\n  const [posts, setPosts] = useState('');\n  useEffect(() => {\n    const getPosts = async () => {\n      return await axios.get('http://localhost:3001/api/v1/posts/').then(res => {\n        setPosts(res.data);\n      }).catch(error => console.log(error));\n    };\n\n    getPosts();\n    console.log(posts);\n  }, []);\n\n  if (mockPosts.posts.length > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: mockPosts.posts.map(post => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Post, {\n            date: post.date,\n            body: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No posts to display yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this);\n  }\n};\n\n_s(DisplayPosts, \"POyAm6hZFLdFrjPWq8CpprXnzUc=\");\n\n_c = DisplayPosts;\nexport default DisplayPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayPosts\");","map":{"version":3,"sources":["/Users/parkernoble/Documents/coding/icebox/client/src/components/DisplayPosts.js"],"names":["React","useState","useEffect","Post","axios","post","DisplayPosts","mockPosts","posts","title","date","body","irrelevant","setPosts","getPosts","get","then","res","data","catch","error","console","log","length","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,yBAArB;;;AAGA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAMC,SAAS,GAAG;AACdC,IAAAA,KAAK,EAAE,CAAC;AACJC,MAAAA,KAAK,EAAE,KADH;AAEJC,MAAAA,IAAI,EAAE,cAFF;AAGJC,MAAAA,IAAI,EAAE;AAHF,KAAD,EAKP;AACIF,MAAAA,KAAK,EAAE,KADX;AAEIC,MAAAA,IAAI,EAAE,cAFV;AAGIC,MAAAA,IAAI,EAAE;AAHV,KALO,EAUP;AACIF,MAAAA,KAAK,EAAE,OADX;AAEIC,MAAAA,IAAI,EAAE,cAFV;AAGIC,MAAAA,IAAI,EAAE;AAHV,KAVO,EAeP;AACIF,MAAAA,KAAK,EAAE,MADX;AAEIC,MAAAA,IAAI,EAAE,cAFV;AAGIC,MAAAA,IAAI,EAAE;AAHV,KAfO,CADO;AAqBdC,IAAAA,UAAU,EAAE;AACRD,MAAAA,IAAI,EAAE;AADE;AArBE,GAAlB;AAyBA,QAAM,CAACH,KAAD,EAAQK,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,QAAQ,GAAG,YAAY;AACzB,aAAO,MAAMV,KAAK,CAACW,GAAN,CAAU,qCAAV,EACZC,IADY,CACNC,GAAD,IAAS;AACXJ,QAAAA,QAAQ,CAACI,GAAG,CAACC,IAAL,CAAR;AACH,OAHY,EAIZC,KAJY,CAINC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAJH,CAAb;AAKH,KAND;;AAOAN,IAAAA,QAAQ;AACRO,IAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AAEH,GAXQ,EAWN,EAXM,CAAT;;AAcA,MAAID,SAAS,CAACC,KAAV,CAAgBe,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,wBACI;AAAA,gBACKhB,SAAS,CAACC,KAAV,CAAgBgB,GAAhB,CAAqBnB,IAAD,IAAU;AAC3B,4BACI;AAAA,iCACI,QAAC,IAAD;AACI,YAAA,IAAI,EAAEA,IAAI,CAACK,IADf;AAEI,YAAA,IAAI,EAAEL,IAAI,CAACM;AAFf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQH,OATA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH,GAfD,MAeO;AACH,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACJ,CA5DD;;GAAML,Y;;KAAAA,Y;AA8DN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Post from './Post';\nimport axios from 'axios';\nimport { post } from '../../../backend/routes';\n\n\nconst DisplayPosts = () => {\n    const mockPosts = {\n        posts: [{\n            title: \"One\",\n            date: \"31 June 2021\",\n            body: \"Lorem ipsum blah blah blah something something\"\n        },\n        {\n            title: \"Two\",\n            date: \"31 June 2021\",\n            body: \"Lorem ipsum blah blah blah something something\"\n        },\n        {\n            title: \"Three\",\n            date: \"31 June 2021\",\n            body: \"Lorem ipsum blah blah blah something something\"\n        },\n        {\n            title: \"Four\",\n            date: \"31 June 2021\",\n            body: \"Lorem ipsum blah blah blah something something\"\n        }],\n        irrelevant: {\n            body: \"haha! I wasted your time!\"\n        }\n    }\n    const [posts, setPosts] = useState('');\n\n    useEffect(() => {\n        const getPosts = async () => {\n            return await axios.get('http://localhost:3001/api/v1/posts/')\n            .then((res) => {\n                setPosts(res.data);\n            })\n            .catch(error => console.log(error));\n        }\n        getPosts();\n        console.log(posts);\n\n    }, []);\n\n\n    if (mockPosts.posts.length > 0) {\n        return (\n            <div>\n                {mockPosts.posts.map((post) => {\n                    return (\n                        <div>\n                            <Post\n                                date={post.date}\n                                body={post.body}\n                            />\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    } else {\n        return <h3>No posts to display yet.</h3>\n    }\n}\n\nexport default DisplayPosts;"]},"metadata":{},"sourceType":"module"}