{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport React__default, { createElement, Fragment } from 'react';\nimport { u as useUtils } from './dimensions-3ff816e9.js';\nimport { createSvgIcon } from '@material-ui/core/utils';\nimport { a as TimePickerToolbar } from './ClockView-cfa6b504.js';\nimport { g as useParsedDate, s as pick12hOr24hFormat } from './Picker-607b95da.js';\nimport { m as makeValidationHook, b as makePickerWithStateAndWrapper, c as ResponsiveWrapper, d as DesktopWrapper, M as MobileWrapper, S as StaticWrapper } from './makePickerWithState-ad2989cf.js';\nimport { v as validateTime } from './Clock-30866969.js';\n/**\n * @ignore - internal component.\n */\n\nvar ClockIcon = createSvgIcon( /*#__PURE__*/createElement(Fragment, null, /*#__PURE__*/createElement(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), /*#__PURE__*/createElement(\"path\", {\n  d: \"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"\n})), 'Clock');\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction getTextFieldAriaText(value, utils) {\n  return value && utils.isValid(utils.date(value)) ? \"Choose time, selected time is \".concat(utils.format(utils.date(value), 'fullTime')) : 'Choose time';\n}\n\nfunction useInterceptProps(_ref) {\n  var ampm = _ref.ampm,\n      inputFormat = _ref.inputFormat,\n      __maxTime = _ref.maxTime,\n      __minTime = _ref.minTime,\n      _ref$openTo = _ref.openTo,\n      openTo = _ref$openTo === void 0 ? 'hours' : _ref$openTo,\n      _ref$views = _ref.views,\n      views = _ref$views === void 0 ? ['hours', 'minutes'] : _ref$views,\n      other = _objectWithoutProperties(_ref, [\"ampm\", \"inputFormat\", \"maxTime\", \"minTime\", \"openTo\", \"views\"]);\n\n  var utils = useUtils();\n  var minTime = useParsedDate(__minTime);\n  var maxTime = useParsedDate(__maxTime);\n  var willUseAmPm = ampm !== null && ampm !== void 0 ? ampm : utils.is12HourCycleInCurrentLocale();\n  return _objectSpread({\n    views: views,\n    openTo: openTo,\n    minTime: minTime,\n    maxTime: maxTime,\n    ampm: willUseAmPm,\n    acceptRegex: willUseAmPm ? /[\\dapAP]/gi : /\\d/gi,\n    mask: '__:__',\n    disableMaskedInput: willUseAmPm,\n    getOpenDialogAriaText: getTextFieldAriaText,\n    openPickerIcon: /*#__PURE__*/React__default.createElement(ClockIcon, null),\n    inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {\n      localized: utils.formats.fullTime,\n      '12h': utils.formats.fullTime12h,\n      '24h': utils.formats.fullTime24h\n    })\n  }, other);\n}\n\nvar timePickerConfig = {\n  useInterceptProps: useInterceptProps,\n  useValidation: makeValidationHook(validateTime),\n  DefaultToolbarComponent: TimePickerToolbar\n};\nvar TimePicker = makePickerWithStateAndWrapper(ResponsiveWrapper, _objectSpread({\n  name: 'MuiTimePicker'\n}, timePickerConfig));\nvar DesktopTimePicker = makePickerWithStateAndWrapper(DesktopWrapper, _objectSpread({\n  name: 'MuiDesktopTimePicker'\n}, timePickerConfig));\nvar MobileTimePicker = makePickerWithStateAndWrapper(MobileWrapper, _objectSpread({\n  name: 'MuiMobileTimePicker'\n}, timePickerConfig));\nvar StaticTimePicker = makePickerWithStateAndWrapper(StaticWrapper, _objectSpread({\n  name: 'MuiStaticTimePicker'\n}, timePickerConfig));\nexport { DesktopTimePicker as D, MobileTimePicker as M, StaticTimePicker as S, TimePicker as T, getTextFieldAriaText as g };","map":{"version":3,"sources":["../src/_shared/icons/Clock.tsx","../src/TimePicker/TimePicker.tsx"],"names":["ClockIcon","createSvgIcon","value","utils","ampm","inputFormat","maxTime","__maxTime","minTime","__minTime","openTo","views","other","useUtils","useParsedDate","willUseAmPm","acceptRegex","mask","disableMaskedInput","getOpenDialogAriaText","openPickerIcon","React","pick12hOr24hFormat","localized","fullTime24h","timePickerConfig","useInterceptProps","useValidation","makeValidationHook","DefaultToolbarComponent","TimePickerToolbar","TimePicker","makePickerWithStateAndWrapper","name","DesktopTimePicker","MobileTimePicker","StaticTimePicker"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n\n/**\n * @ignore - internal component.\n */\nexport const ClockIcon = createSvgIcon(\n  <React.Fragment>\n    <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\" />\n    <path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\" />\n  </React.Fragment>,\n  'Clock'\n);\n","import React from 'react';\nimport { ClockIcon } from '../_shared/icons/Clock';\nimport { ParsableDate } from '../constants/prop-types';\nimport { TimePickerToolbar } from './TimePickerToolbar';\nimport { ExportedClockViewProps } from '../views/Clock/ClockView';\nimport { ResponsiveWrapper } from '../wrappers/ResponsiveWrapper';\nimport { pick12hOr24hFormat } from '../_helpers/text-field-helper';\nimport { useParsedDate } from '../_shared/hooks/date-helpers-hooks';\nimport { useUtils, MuiPickersAdapter } from '../_shared/hooks/useUtils';\nimport { validateTime, TimeValidationError } from '../_helpers/time-utils';\nimport { makePickerWithStateAndWrapper } from '../Picker/makePickerWithState';\nimport { MobileWrapper, DesktopWrapper, StaticWrapper } from '../wrappers/Wrapper';\nimport { WithViewsProps, AllSharedPickerProps } from '../Picker/SharedPickerProps';\nimport { ValidationProps, makeValidationHook } from '../_shared/hooks/useValidation';\n\nexport interface BaseTimePickerProps\n  extends ExportedClockViewProps,\n    ValidationProps<TimeValidationError, ParsableDate>,\n    WithViewsProps<'hours' | 'minutes' | 'seconds'> {}\n\nexport function getTextFieldAriaText(value: ParsableDate, utils: MuiPickersAdapter) {\n  return value && utils.isValid(utils.date(value))\n    ? `Choose time, selected time is ${utils.format(utils.date(value), 'fullTime')}`\n    : 'Choose time';\n}\n\nfunction useInterceptProps({\n  ampm,\n  inputFormat,\n  maxTime: __maxTime,\n  minTime: __minTime,\n  openTo = 'hours',\n  views = ['hours', 'minutes'],\n  ...other\n}: BaseTimePickerProps & AllSharedPickerProps) {\n  const utils = useUtils();\n\n  const minTime = useParsedDate(__minTime);\n  const maxTime = useParsedDate(__maxTime);\n  const willUseAmPm = ampm ?? utils.is12HourCycleInCurrentLocale();\n\n  return {\n    views,\n    openTo,\n    minTime,\n    maxTime,\n    ampm: willUseAmPm,\n    acceptRegex: willUseAmPm ? /[\\dapAP]/gi : /\\d/gi,\n    mask: '__:__',\n    disableMaskedInput: willUseAmPm,\n    getOpenDialogAriaText: getTextFieldAriaText,\n    openPickerIcon: <ClockIcon />,\n    inputFormat: pick12hOr24hFormat(inputFormat, willUseAmPm, {\n      localized: utils.formats.fullTime,\n      '12h': utils.formats.fullTime12h,\n      '24h': utils.formats.fullTime24h,\n    }),\n    ...other,\n  };\n}\n\nconst timePickerConfig = {\n  useInterceptProps,\n  useValidation: makeValidationHook<TimeValidationError, ParsableDate, BaseTimePickerProps>(\n    validateTime\n  ),\n  DefaultToolbarComponent: TimePickerToolbar,\n};\n\nexport const TimePicker = makePickerWithStateAndWrapper<BaseTimePickerProps>(ResponsiveWrapper, {\n  name: 'MuiTimePicker',\n  ...timePickerConfig,\n});\n\nexport type TimePickerProps = React.ComponentProps<typeof TimePicker>;\n\nexport const DesktopTimePicker = makePickerWithStateAndWrapper<BaseTimePickerProps>(\n  DesktopWrapper,\n  {\n    name: 'MuiDesktopTimePicker',\n    ...timePickerConfig,\n  }\n);\n\nexport type DesktopTimePickerProps = React.ComponentProps<typeof DesktopTimePicker>;\n\nexport const MobileTimePicker = makePickerWithStateAndWrapper<BaseTimePickerProps>(MobileWrapper, {\n  name: 'MuiMobileTimePicker',\n  ...timePickerConfig,\n});\n\nexport type MobileTimePickerProps = React.ComponentProps<typeof MobileTimePicker>;\n\nexport const StaticTimePicker = makePickerWithStateAndWrapper<BaseTimePickerProps>(StaticWrapper, {\n  name: 'MuiStaticTimePicker',\n  ...timePickerConfig,\n});\n\nexport type StaticTimePickerProps = React.ComponentProps<typeof StaticTimePicker>;\n"]},"metadata":{},"sourceType":"module"}